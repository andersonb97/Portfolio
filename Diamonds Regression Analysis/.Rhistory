#   ggtitle("Histogram of Residuals (Transformed)") +
#   ylab("Density") +
#   xlab("Residuals") +
#   theme(aspect.ratio = 1)
shapiro.test(diamonds.transform.lm$residuals)
# original plot (no transformation)
ggplot(data = diamonds.s, mapping = aes(x = fitted.values, y = residuals)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Residuals") +
ylab("Fitted Values") +
ggtitle("Residuals vs Fitted Value Plot") +
geom_smooth(method = 'lm', se = FALSE)
# log transform plot
ggplot(data = diamonds.s.transform, mapping =
aes(x = fitted.values, y = residuals)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Residuals") +
ylab("Fitted Values") +
ggtitle("Residuals vs Fitted Value Plot (Transformed)") +
geom_smooth(method = 'lm', se = FALSE)
# diamonds.s.dffits <- data.frame("dffits" = dffits(diamonds.transform.lm))
# diamonds.s.dffits$obs <- 1:length(diamonds.s.transform$price)
#
# ggplot(data = diamonds.s.dffits) +
#   geom_point(mapping = aes(x = obs, y = abs(dffits))) +
#   geom_hline(mapping = aes(yintercept = 2 * sqrt(9 / length(obs))),
#              color = "red", linetype = "dashed") +
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# #diamonds.s.dffits[abs(diamonds.s.dffits$dffits) > 2 * sqrt(9 / 300), ]
# removing the residual and fitted values columns from the data frame to make
# variable selection possible
diamonds.s.transform <- diamonds.s.transform[,-c(11,12)]
# the variable named "y" gave us some trouble with GLMNET, so we changed the name to           # "yvar".
names(diamonds.s.transform) <- c("price", "carat", "cut", "color", "clarity", "depth", "table", "x", "yvar", "z")
# model using clarity
clarity.model <- lm(price ~ carat + color + clarity, data = diamonds.s.transform)
# model using x
x.model <- lm(price ~ carat + color + x, data = diamonds.s.transform)
# model using y
y.model <- lm(price ~ carat + color + yvar, data = diamonds.s.transform)
# model using z
z.model <- lm(price ~ carat + color + z, data = diamonds.s.transform)
summary(clarity.model)
#summary(x.model)
#summary(y.model)
#summary(z.model)
vif(clarity.model)
mean(vif(clarity.model)[,1])
# creating data frame without flagged DFFIT values
diamonds.without <- diamonds.s.transform[-diamonds.s.dffits[abs(diamonds.s.dffits$dffits) > 2 * sqrt(9 / 300), ]$obs, ]
# linear model of "without" data frame
without <- lm(price ~ carat + color + clarity, data = diamonds.without)
# # comparing both models
# clarity.model
# without
confint(clarity.model)
confint(without)
# creating a model including interactions
clarity.model.int <- lm(price ~ carat + color + clarity + carat:color, data = diamonds.s.transform)
summary(clarity.model.int)
# comparing the two models to see if there is a significant interaction
anova(clarity.model, clarity.model.int)
new.data <- data.frame(carat = 0.4, cut = "Very Good", color = "H", clarity = "SI2")
#Prediction Interval
log.prediction <- predict(clarity.model.int, newdata = new.data, interval = "prediction")
(round(exp(log.prediction)[c(2, 1, 3)],  2))
new.data <- data.frame(carat = 0.4, cut = "Very Good", color = "H", clarity = "SI2")
#Confidence Interval
log.confidence <- predict(clarity.model.int, newdata = new.data, interval = "confidence")
round(exp(log.confidence)[c(2, 1, 3)], 2)
library(corrplot)
library(ggplot2)
library(ggfortify)
library(car)
sz <- 22
# setting seed to make the sample reproducible
set.seed(12345)
diamonds <- read.csv('diamonds.csv', header = TRUE)
# removing X identifier variable (X was an ID number for each diamond)
diamonds.s <- diamonds[sample(nrow(diamonds), 300), -1]
# re-arranging columns
diamonds.s <- diamonds.s[,c(7, 1, 2, 3, 4, 5, 6, 8, 9, 10)]
head(diamonds.s)
# coercing categorical variables to factors
diamonds.s[, 3] <- as.factor(diamonds.s[, 3])
diamonds.s[, 4] <- as.factor(diamonds.s[, 4])
diamonds.s[, 5] <- as.factor(diamonds.s[, 5])
# checking scatter plot matrix with select variables
plot(diamonds.s[, c(1, 2, 6, 7, 8, 9, 10)])
# initial check for multicollinearity (removing categorical variables for plot)
corrplot(cor(diamonds.s[, c(1, 2, 6, 7, 8, 9, 10)]), type = "upper")
# creating an initial linear model
diamonds.s.lm <- lm(price ~. , data = diamonds.s)
diamonds.s$residuals <- diamonds.s.lm$residuals
diamonds.s$fitted.values <- diamonds.s.lm$fitted.values
# summary of the linear model
summary(diamonds.s.lm)
# carat
ggplot(data = diamonds.s, mapping = aes(x = carat, y = residuals)) +
geom_point() +
geom_point() +
theme_bw() +
xlab("Residuals") +
ylab("Carat") +
ggtitle("Residual vs. Carat Plot") +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm", se = FALSE)
# table
ggplot(data = diamonds.s, mapping = aes(x = table, y = residuals)) +
geom_point() +
geom_point() +
theme_bw() +
xlab("Residuals") +
ylab("Table") +
ggtitle("Residual vs. Table Plot") +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm", se = FALSE)
# depth
ggplot(data = diamonds.s, mapping = aes(x = depth, y = residuals)) +
geom_point() +
geom_point() +
theme_bw() +
xlab("Residuals") +
ylab("Depth") +
ggtitle("Residual vs. Depth Plot") +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm", se = FALSE)
# x
ggplot(data = diamonds.s, mapping = aes(x = x, y = residuals)) +
geom_point() +
geom_point() +
theme_bw() +
xlab("Residuals") +
ylab("X") +
ggtitle("Residual vs. X") +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm", se = FALSE)
# y
ggplot(data = diamonds.s, mapping = aes(x = y, y = residuals)) +
geom_point() +
geom_point() +
theme_bw() +
xlab("Residuals") +
ylab("Y") +
ggtitle("Residual vs. Y") +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm", se = FALSE)
# z
ggplot(data = diamonds.s, mapping = aes(x = z, y = residuals)) +
geom_point() +
geom_point() +
theme_bw() +
xlab("Residuals") +
ylab("Z") +
ggtitle("Residual vs. Z") +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm", se = FALSE)
avPlots(diamonds.s.lm, terms = ~ carat + depth + table + x + y + z)
ggplot(data = diamonds.s, mapping = aes(x = fitted.values, y = residuals)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Residuals") +
ylab("Fitted Values") +
ggtitle("Residuals vs Fitted Value Plot") +
geom_smooth(method = 'lm', se = FALSE)
ggplot(data = diamonds.s, mapping = aes(y = residuals)) +
geom_boxplot() +
ylab("Residuals") +
ggtitle("Residuals Boxplot") +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = diamonds.s, mapping = aes(x = residuals)) +
geom_histogram(mapping = aes(y = ..density..), binwidth = 500) +
stat_function(fun = dnorm, color = "red", size = 2,
args = list(mean = mean(diamonds.s$residuals),
sd = sd(diamonds.s$residuals))) +
theme(aspect.ratio = 1)
shapiro.test(diamonds.s.lm$residuals)
ggplot(data = diamonds.s, mapping = aes(x = fitted.values, y = residuals)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Residuals") +
ylab("Fitted Values") +
ggtitle("Residuals vs Fitted Value Plot") +
geom_smooth(method = 'lm', se = FALSE)
# #Cut
# ggplot(data = diamonds.s, mapping = aes(x = cut, y = price)) +
#   geom_boxplot() +
#   theme_bw() +
#   xlab("Cut") +
#   ylab("Price") +
#   ggtitle("Cut Boxplot") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5))
#
# #Color
# ggplot(data = diamonds.s, mapping = aes(x = clarity, y = price)) +
#   geom_boxplot() +
#   theme_bw() +
#   xlab("Clarity") +
#   ylab("Price") +
#   ggtitle("Clarity Boxplot") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5))
#
# #Clarity
# ggplot(data = diamonds.s, mapping = aes(x = color, y = price)) +
#   geom_boxplot() +
#   theme_bw() +
#   xlab("Color") +
#   ylab("Price") +
#   ggtitle("Color Boxplot") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5))
diamonds.s.dffits <- data.frame("dffits" = dffits(diamonds.s.lm))
diamonds.s.dffits$obs <- 1:length(diamonds.s$price)
ggplot(data = diamonds.s.dffits) +
geom_point(mapping = aes(x = obs, y = abs(dffits))) +
geom_hline(mapping = aes(yintercept = 2 * sqrt(9 / length(obs))),
color = "red", linetype = "dashed") +
theme_bw() +
theme(aspect.ratio = 1)
#diamonds.s.dffits[abs(diamonds.s.dffits$dffits) > 2 * sqrt(9 / 300), ]
# ## Carat
# diamonds.s.dfbetas <- as.data.frame(dfbetas(diamonds.s.lm))
# diamonds.s.dfbetas$obs <- 1:length(diamonds.s$price)
#
# ggplot(data = diamonds.s.dfbetas) +
#   geom_point(mapping = aes(x = obs, y = abs(carat))) +
#   geom_hline(mapping = aes(yintercept = 1),
#              color = "red", linetype = "dashed") +  # for n <= 30
#   geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
#              color = "red", linetype = "dashed") +  # for n > 30
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# carat.extreme.dfbetas <- diamonds.s.dfbetas[abs(diamonds.s.dfbetas$carat) > 1, ]
# carat.extreme.dfbetas[order(carat.extreme.dfbetas$carat), ]
#
# ##Depth
# diamonds.s.dfbetas <- as.data.frame(dfbetas(diamonds.s.lm))
# diamonds.s.dfbetas$obs <- 1:length(diamonds.s$price)
#
# ggplot(data = diamonds.s.dfbetas) +
#   geom_point(mapping = aes(x = obs, y = abs(depth))) +
#   geom_hline(mapping = aes(yintercept = 1),
#              color = "red", linetype = "dashed") +  # for n <= 30
#   geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
#              color = "red", linetype = "dashed") +  # for n > 30
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# depth.extreme.dfbetas <- diamonds.s.dfbetas[abs(diamonds.s.dfbetas$depth) > 1, ]
# depth.extreme.dfbetas[order(depth.extreme.dfbetas$depth), ]
#
#
# ## Table
# diamonds.s.dfbetas <- as.data.frame(dfbetas(diamonds.s.lm))
# diamonds.s.dfbetas$obs <- 1:length(diamonds.s$price)
#
# ggplot(data = diamonds.s.dfbetas) +
#   geom_point(mapping = aes(x = obs, y = abs(table))) +
#   geom_hline(mapping = aes(yintercept = 1),
#              color = "red", linetype = "dashed") +  # for n <= 30
#   geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
#              color = "red", linetype = "dashed") +  # for n > 30
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# table.extreme.dfbetas <- diamonds.s.dfbetas[abs(diamonds.s.dfbetas$table) > 1, ]
# table.extreme.dfbetas[order(table.extreme.dfbetas$table), ]
#
# ## X
# diamonds.s.dfbetas <- as.data.frame(dfbetas(diamonds.s.lm))
# diamonds.s.dfbetas$obs <- 1:length(diamonds.s$price)
#
# ggplot(data = diamonds.s.dfbetas) +
#   geom_point(mapping = aes(x = obs, y = abs(x))) +
#   geom_hline(mapping = aes(yintercept = 1),
#              color = "red", linetype = "dashed") +  # for n <= 30
#   geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
#              color = "red", linetype = "dashed") +  # for n > 30
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# x.extreme.dfbetas <- diamonds.s.dfbetas[abs(diamonds.s.dfbetas$x) > 1, ]
# x.extreme.dfbetas[order(x.extreme.dfbetas$x), ]
#
# ## Y
# diamonds.s.dfbetas <- as.data.frame(dfbetas(diamonds.s.lm))
# diamonds.s.dfbetas$obs <- 1:length(diamonds.s$price)
#
# ggplot(data = diamonds.s.dfbetas) +
#   geom_point(mapping = aes(x = obs, y = abs(y))) +
#   geom_hline(mapping = aes(yintercept = 1),
#              color = "red", linetype = "dashed") +  # for n <= 30
#   geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
#              color = "red", linetype = "dashed") +  # for n > 30
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# y.extreme.dfbetas <- diamonds.s.dfbetas[abs(diamonds.s.dfbetas$y) > 1, ]
# y.extreme.dfbetas[order(y.extreme.dfbetas$y), ]
#
# ## Z
# diamonds.s.dfbetas <- as.data.frame(dfbetas(diamonds.s.lm))
# diamonds.s.dfbetas$obs <- 1:length(diamonds.s$price)
#
# ggplot(data = diamonds.s.dfbetas) +
#   geom_point(mapping = aes(x = obs, y = abs(z))) +
#   geom_hline(mapping = aes(yintercept = 1),
#              color = "red", linetype = "dashed") +  # for n <= 30
#   geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
#              color = "red", linetype = "dashed") +  # for n > 30
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# #identifies any observations with a DFBETA greater
# # than one (as seen on the plot)
# z.extreme.dfbetas <- diamonds.s.dfbetas[abs(diamonds.s.dfbetas$z) > 1, ]
# z.extreme.dfbetas[order(z.extreme.dfbetas$z), ]
#corrplot(cor(diamonds.s[, c(1, 2, 6, 7, 8, 9, 10)]), type = "upper")
vif(diamonds.s.lm)
mean(vif(diamonds.s.lm)[,1])
bc <- boxCox(diamonds.s$price ~ diamonds.s$carat + diamonds.s$cut + diamonds.s$color + diamonds.s$clarity + diamonds.s$depth + diamonds.s$table + diamonds.s$x + diamonds.s$y + diamonds.s$z)
diamonds.s.transform <- diamonds.s
diamonds.s.transform[,1] <- log(diamonds.s.transform[,1])
diamonds.transform.lm <- lm(price ~. , data = diamonds.s.transform)
diamonds.s.transform$residuals <- diamonds.transform.lm$residuals
diamonds.s.transform$fitted.values <- diamonds.transform.lm$fitted.values
# # carat
# ggplot(data = diamonds.s.transform, mapping = aes(x = carat, y = residuals)) +
#   geom_point() +
#   geom_point() +
#   theme_bw() +
#   xlab("Residuals") +
#   ylab("Carat") +
#   ggtitle("Residual vs. Carat Plot") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   geom_smooth(method = "lm", se = FALSE)
#
# # table
# ggplot(data = diamonds.s.transform, mapping = aes(x = table, y = residuals)) +
#   geom_point() +
#   geom_point() +
#   theme_bw() +
#   xlab("Residuals") +
#   ylab("Table") +
#   ggtitle("Residual vs. Table Plot") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   geom_smooth(method = "lm", se = FALSE)
#
# # depth
# ggplot(data = diamonds.s.transform, mapping = aes(x = depth, y = residuals)) +
#   geom_point() +
#   geom_point() +
#   theme_bw() +
#   xlab("Residuals") +
#   ylab("Depth") +
#   ggtitle("Residual vs. Depth Plot") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   geom_smooth(method = "lm", se = FALSE)
#
# # x
# ggplot(data = diamonds.s.transform, mapping = aes(x = x, y = residuals)) +
#   geom_point() +
#   geom_point() +
#   theme_bw() +
#   xlab("Residuals") +
#   ylab("X") +
#   ggtitle("Residual vs. X") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   geom_smooth(method = "lm", se = FALSE)
#
# # y
# ggplot(data = diamonds.s.transform, mapping = aes(x = y, y = residuals)) +
#   geom_point() +
#   geom_point() +
#   theme_bw() +
#   xlab("Residuals") +
#   ylab("Y") +
#   ggtitle("Residual vs. Y") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   geom_smooth(method = "lm", se = FALSE)
#
# # z
# ggplot(data = diamonds.s.transform, mapping = aes(x = z, y = residuals)) +
#   geom_point() +
#   geom_point() +
#   theme_bw() +
#   xlab("Residuals") +
#   ylab("Z") +
#   ggtitle("Residual vs. Z") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   geom_smooth(method = "lm", se = FALSE)
# ggplot(data = diamonds.s.transform, mapping = aes(y = residuals)) +
#   geom_boxplot() +
#   ylab("Residuals") +
#   ggtitle("Residuals Boxplot (Transformed)") +
#   theme(aspect.ratio = 1) +
#   theme(plot.title = element_text(hjust = 0.5))
# ggplot(data = diamonds.s.transform, mapping = aes(x = residuals)) +
#   geom_histogram(mapping = aes(y = ..density..), binwidth = 0.05) +
#   stat_function(fun = dnorm, color = "red", size = 2,
#                 args = list(mean = mean(diamonds.s.transform$residuals),
#                             sd = sd(diamonds.s.transform$residuals))) +
#   ggtitle("Histogram of Residuals (Transformed)") +
#   ylab("Density") +
#   xlab("Residuals") +
#   theme(aspect.ratio = 1)
shapiro.test(diamonds.transform.lm$residuals)
# original plot (no transformation)
ggplot(data = diamonds.s, mapping = aes(x = fitted.values, y = residuals)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Residuals") +
ylab("Fitted Values") +
ggtitle("Residuals vs Fitted Value Plot") +
geom_smooth(method = 'lm', se = FALSE)
# log transform plot
ggplot(data = diamonds.s.transform, mapping =
aes(x = fitted.values, y = residuals)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Residuals") +
ylab("Fitted Values") +
ggtitle("Residuals vs Fitted Value Plot (Transformed)") +
geom_smooth(method = 'lm', se = FALSE)
# diamonds.s.dffits <- data.frame("dffits" = dffits(diamonds.transform.lm))
# diamonds.s.dffits$obs <- 1:length(diamonds.s.transform$price)
#
# ggplot(data = diamonds.s.dffits) +
#   geom_point(mapping = aes(x = obs, y = abs(dffits))) +
#   geom_hline(mapping = aes(yintercept = 2 * sqrt(9 / length(obs))),
#              color = "red", linetype = "dashed") +
#   theme_bw() +
#   theme(aspect.ratio = 1)
#
# #diamonds.s.dffits[abs(diamonds.s.dffits$dffits) > 2 * sqrt(9 / 300), ]
# removing the residual and fitted values columns from the data frame to make
# variable selection possible
diamonds.s.transform <- diamonds.s.transform[,-c(11,12)]
# the variable named "y" gave us some trouble with GLMNET, so we changed the name to           # "yvar".
names(diamonds.s.transform) <- c("price", "carat", "cut", "color", "clarity", "depth", "table", "x", "yvar", "z")
# model using clarity
clarity.model <- lm(price ~ carat + color + clarity, data = diamonds.s.transform)
# model using x
x.model <- lm(price ~ carat + color + x, data = diamonds.s.transform)
# model using y
y.model <- lm(price ~ carat + color + yvar, data = diamonds.s.transform)
# model using z
z.model <- lm(price ~ carat + color + z, data = diamonds.s.transform)
summary(clarity.model)
#summary(x.model)
#summary(y.model)
#summary(z.model)
vif(clarity.model)
mean(vif(clarity.model)[,1])
# creating data frame without flagged DFFIT values
diamonds.without <- diamonds.s.transform[-diamonds.s.dffits[abs(diamonds.s.dffits$dffits) > 2 * sqrt(9 / 300), ]$obs, ]
# linear model of "without" data frame
without <- lm(price ~ carat + color + clarity, data = diamonds.without)
# # comparing both models
# clarity.model
# without
confint(clarity.model)
confint(without)
# creating a model including interactions
clarity.model.int <- lm(price ~ carat + color + clarity + carat:color, data = diamonds.s.transform)
summary(clarity.model.int)
# comparing the two models to see if there is a significant interaction
anova(clarity.model, clarity.model.int)
new.data <- data.frame(carat = 0.4, cut = "Very Good", color = "H", clarity = "SI2")
#Prediction Interval
log.prediction <- predict(clarity.model.int, newdata = new.data, interval = "prediction")
(round(exp(log.prediction)[c(2, 1, 3)],  2))
new.data <- data.frame(carat = 0.4, cut = "Very Good", color = "H", clarity = "SI2")
#Confidence Interval
log.confidence <- predict(clarity.model.int, newdata = new.data, interval = "confidence")
round(exp(log.confidence)[c(2, 1, 3)], 2)
confint(clarity.model.int)
exp(confint(clarity.model.int))
confint(clarity.model.int)
exp(confint(clarity.model.int))
